<!DOCTYPE html>
<html>

<head>
  <title>Socket.IO chat</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=PT+Mono&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/index.css" />
</head>

<body>
  <div id="clock">
    <div class="display">
      <div class="time">00:00</div>
      <div class="round">Round <span class="currentRound">0</span> of <span class="totalRounds">0</span></div>
      <div><span class="currentInterval">1</span> / <span class="totalIntervals"></span> : <span class="title"></span></div>
    </div>
  </div>
  <%- (typeof controls !='undefined' && controls) ? include('./partials/presets') : '' %>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      var socket = io();

      var messages = document.getElementById('messages');
      var presets = document.getElementById('presets');
      var input = document.getElementById('input');
      let sequenceId;
      let jsInterval;
      let autostart = false;
      
      var audio = new Audio('longbeep.mp3');
      
      const display = document.querySelector('#clock .display');
      const t =  display.querySelector('.time');
      const roundsTotal = display.querySelector('.totalRounds');
      const currentRound = display.querySelector('.currentRound');
      const intervalsTotal = display.querySelector('.totalIntervals');
      const currentInterval = display.querySelector('.currentInterval');

      function setupClock(sequence) {
        t.textContent = formatTime(sequence.currentInterval.duration);
        t.dataset.duration = sequence.currentInterval.duration;
        display.querySelector('.title').textContent = sequence.currentInterval.name;
        currentRound.textContent = sequence.currentSet;
        roundsTotal.textContent = sequence.numberOfSets;
        intervalsTotal.textContent = sequence.intervals.length;
      }

      function setupTimer(interval) {
        const t =  display.querySelector('.time');
        t.textContent = formatTime(interval.duration);
        t.dataset.duration = interval.duration;
        display.querySelector('.title').textContent = interval.name;
        if (interval.index) currentInterval.textContent = interval.index + 1;

        if (autostart)  {
          jsInterval = startTimer();
        }
      }

      function stopTimer(jsInterval) {
        clearInterval(jsInterval);
      }

      function startTimer() {

        display.classList.add('active');
        let duration = t.dataset.duration;

        var start = Date.now(),
          diff,
          minutes,
          seconds;
        function timer() {

          diff = duration - (((Date.now() - start) / 1000) | 0);

          display.querySelector('.time').textContent = formatTime(diff);


          if (diff <= 0) {
            audio.play();
              clearInterval(jsInterval);
            // }
          }
        };

        // we don't want to wait a full second before the timer starts
        timer();
        jsInterval = setInterval(timer, 1000);
        return jsInterval;

      }

      function formatTime(duration) {
          // does the same job as parseInt truncates the float
          minutes = (duration / 60) | 0;
          seconds = (duration % 60) | 0;

          minutes = minutes < 10 ? "0" + minutes : minutes;
          seconds = seconds < 10 ? "0" + seconds : seconds;

          return minutes + ":" + seconds;
      }

      presets.addEventListener('click', function (e) {
        e.preventDefault();
        if (e.target.dataset.duration) {
          roundInput = document.querySelector('input[name="rounds"]');
  //        socket.emit('create timer', { duration: e.target.dataset.duration, rounds: roundInput.value });
        }
      });

      document.getElementById('startstop').addEventListener('click', function (e) {
        e.preventDefault();
        if (e.target.dataset.action) {
          socket.emit(`${e.target.dataset.action} timer`);
        }
      })


      socket.on('stop timer', function (msg) {
        stopTimer(jsInterval);
      });

      socket.on('start timer', function (interval) {
        
        autostart = true;
        jsInterval = startTimer();
      });

      socket.on('setup interval', function (interval) {
        if (interval.color) display.classList.add(`color-${interval.color}`);
        setupTimer(interval);
      });

      socket.on('setup clock', function (sequence) {
        setupClock(sequence);
      });

      socket.on('timer complete', function (e) {
        display.classList.remove('active');
      });

      socket.emit('fetch sequence', 'cirque');
    </script>
</body>

</html>