<!DOCTYPE html>
<html>

<head>
  <title>Socket.IO chat</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=PT+Mono&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/index.css" />
</head>

<body>
  <div id="clock">
    <div class="display">
      <div class="time">00:00</div>
      <div class="round"></div>
      <div class="title"></div>
    </div>
  </div>
  <%- (typeof controls !='undefined' && controls) ? include('./partials/presets') : '' %>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      var socket = io();

      var messages = document.getElementById('messages');
      var presets = document.getElementById('presets');
      var input = document.getElementById('input');
      let interval;
      let sequenceId;
      
      var audio = new Audio('longbeep.mp3');
      
      var display = document.querySelector('#clock .display');

      function setupTimer(seq) {
        const t =  display.querySelector('.time');
        t.textContent = formatTime(seq.intervals[0].duration);
        t.dataset.duration = seq.intervals[0].duration;
        display.querySelector('.title').textContent = seq.intervals[0].name;
      }

      function stopTimer(interval) {
        clearInterval(interval);
      }

      function startTimer() {

        display.classList.add('active');
        const t =  display.querySelector('.time');
        let duration = t.dataset.duration;
        // let totalRounds = parseInt(args.rounds);
        // let round = 1;
        var start = Date.now(),
          diff,
          minutes,
          seconds;
        function timer() {
          // get the number of seconds that have elapsed since 
          // startTimer() was called
          diff = duration - (((Date.now() - start) / 1000) | 0);

          display.querySelector('.time').textContent = formatTime(diff);


          if (diff <= 0) {
            audio.play();
            // if (round < totalRounds) {
            //   round++;
            //   start = Date.now() + 1000;
              
            //   clearInterval(interval);
            //   interval = setInterval(timer, 1000);
            // } else {

              display.classList.remove('active')
              clearInterval(interval);
            // }
          }
        };

        // we don't want to wait a full second before the timer starts
        timer();
        let interval = setInterval(timer, 1000);
        return interval;

      }

      function formatTime(duration) {
          // does the same job as parseInt truncates the float
          minutes = (duration / 60) | 0;
          seconds = (duration % 60) | 0;

          minutes = minutes < 10 ? "0" + minutes : minutes;
          seconds = seconds < 10 ? "0" + seconds : seconds;

          return minutes + ":" + seconds;
      }

      presets.addEventListener('click', function (e) {
        e.preventDefault();
        if (e.target.dataset.duration) {
          roundInput = document.querySelector('input[name="rounds"]');
        //  socket.emit('start timer', { duration: e.target.dataset.duration, rounds: roundInput.value });
        }
      });

      document.getElementById('startstop').addEventListener('click', function (e) {
        e.preventDefault();
        if (!sequenceId) throw new Error(sequenceId);
        if (e.target.dataset.action) {
          socket.emit(`${e.target.dataset.action} timer`, sequenceId);
        }
      })


      socket.on('stop timer', function (msg) {
        stopTimer(interval);
      });

      socket.on('start timer', function (msg) {
        interval = startTimer();
      });

      socket.on('setup timer', function (msg) {
        console.log(msg);
        sequenceId = msg.id;
        setupTimer(msg);
      });

      socket.emit('fetch timer', 10326248);
    </script>
</body>

</html>